{"ast":null,"code":"import _defineProperty from \"D:\\\\Docs\\\\Programing Projects\\\\snowline-route-manager\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_ACTIVE_ROUTE, REQUEST_ROUTES_PENDING, REQUEST_ROUTES_SUCCESS, REQUEST_ROUTES_FAILED } from './constants.js';\nimport { object } from 'prop-types';\nconst initialStateActiveRoute = {\n  activeRoute: ''\n};\nexport const setActiveRoute = (state = initialStateActiveRoute, action = {}) => {\n  switch (action.type) {\n    case SET_ACTIVE_ROUTE:\n      return _objectSpread({}, state, {\n        activeRoute: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\nconst initialStateRoutes = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\nexport const requestRoutes = (state = initialStateRoutes, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROUTES_PENDING:\n      return _objectSpread({}, state, {\n        isPending: true\n      });\n\n    case REQUEST_ROUTES_SUCCESS:\n      return _objectSpread({}, state, {\n        routes: action.payload,\n        isPending: false\n      });\n\n    case REQUEST_ROUTES_FAILED:\n      return _objectSpread({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:\\Docs\\Programing Projects\\snowline-route-manager\\client\\src\\reducers.js"],"names":["SET_ACTIVE_ROUTE","REQUEST_ROUTES_PENDING","REQUEST_ROUTES_SUCCESS","REQUEST_ROUTES_FAILED","object","initialStateActiveRoute","activeRoute","setActiveRoute","state","action","type","payload","initialStateRoutes","isPending","robots","error","requestRoutes","routes"],"mappings":";;;;;;AAAA,SAASA,gBAAT,EACIC,sBADJ,EAEIC,sBAFJ,EAGIC,qBAHJ,QAIO,gBAJP;AAKA,SAASC,MAAT,QAAuB,YAAvB;AAEA,MAAMC,uBAAuB,GAAG;AAC5BC,EAAAA,WAAW,EAAE;AADe,CAAhC;AAIA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAK,GAACH,uBAAP,EAAgCI,MAAM,GAAC,EAAvC,KAA8C;AACxE,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKV,gBAAL;AACI,+BAAWQ,KAAX;AAAkBF,QAAAA,WAAW,EAAEG,MAAM,CAACE;AAAtC;;AACJ;AACI,aAAOH,KAAP;AAJR;AAOH,CARM;AAUP,MAAMI,kBAAkB,GAAG;AACvBC,EAAAA,SAAS,EAAE,KADY;AAEvBC,EAAAA,MAAM,EAAE,EAFe;AAGvBC,EAAAA,KAAK,EAAE;AAHgB,CAA3B;AAKA,OAAO,MAAMC,aAAa,GAAG,CAACR,KAAK,GAAGI,kBAAT,EAA6BH,MAAM,GAAC,EAApC,KAA2C;AACpE,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,sBAAL;AACI,+BAAWO,KAAX;AAAkBK,QAAAA,SAAS,EAAE;AAA7B;;AACJ,SAAKX,sBAAL;AACI,+BAAWM,KAAX;AAAkBS,QAAAA,MAAM,EAAER,MAAM,CAACE,OAAjC;AAA0CE,QAAAA,SAAS,EAAE;AAArD;;AACJ,SAAKV,qBAAL;AACI,+BAAWK,KAAX;AAAkBO,QAAAA,KAAK,EAAEN,MAAM,CAACE,OAAhC;AAAyCE,QAAAA,SAAS,EAAE;AAApD;;AACJ;AACI,aAAOL,KAAP;AARR;AAUH,CAXM","sourcesContent":["import { SET_ACTIVE_ROUTE, \r\n    REQUEST_ROUTES_PENDING,\r\n    REQUEST_ROUTES_SUCCESS,\r\n    REQUEST_ROUTES_FAILED \r\n} from './constants.js'\r\nimport { object } from 'prop-types'\r\n\r\nconst initialStateActiveRoute = {\r\n    activeRoute: '' \r\n}\r\n\r\nexport const setActiveRoute = (state=initialStateActiveRoute, action={}) => {\r\n    switch(action.type) {\r\n        case SET_ACTIVE_ROUTE:\r\n            return {...state, activeRoute: action.payload }\r\n        default:    \r\n            return state\r\n\r\n    }\r\n}\r\n\r\nconst initialStateRoutes = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport const requestRoutes = (state = initialStateRoutes, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROUTES_PENDING: \r\n            return {...state, isPending: true}\r\n        case REQUEST_ROUTES_SUCCESS:\r\n            return {...state, routes: action.payload, isPending: false}\r\n        case REQUEST_ROUTES_FAILED:\r\n            return {...state, error: action.payload, isPending: false}\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}