{"ast":null,"code":"import rules from \"../rbac-rules\";\n\nconst check = (rules, role, action, data) => {\n  const permissions = rules[role];\n\n  if (!permissions) {\n    // role is not present in the rules\n    return false;\n  }\n\n  const staticPermissions = permissions.static;\n\n  if (staticPermissions && staticPermissions.includes(action)) {\n    // static rule not provided for action\n    return true;\n  }\n\n  const dynamicPermissions = permissions.dynamic;\n\n  if (dynamicPermissions) {\n    const permissionCondition = dynamicPermissions[action];\n\n    if (!permissionCondition) {\n      // dynamic rule not provided for action\n      return false;\n    }\n\n    return permissionCondition(data);\n  }\n\n  return false;\n};\n\nconst Can = props => check(rules, props.role, props.perform, props.data) ? props.yes() : props.no();\n\nCan.defaultProps = {\n  yes: () => null,\n  no: () => null\n};\nexport default Can;","map":{"version":3,"sources":["D:\\Docs\\Programing Projects\\snowline-route-manager\\client\\src\\components\\Can.js"],"names":["rules","check","role","action","data","permissions","staticPermissions","static","includes","dynamicPermissions","dynamic","permissionCondition","Can","props","perform","yes","no","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,eAAlB;;AAEA,MAAMC,KAAK,GAAG,CAACD,KAAD,EAAQE,IAAR,EAAcC,MAAd,EAAsBC,IAAtB,KAA+B;AAC3C,QAAMC,WAAW,GAAGL,KAAK,CAACE,IAAD,CAAzB;;AACA,MAAI,CAACG,WAAL,EAAkB;AAChB;AACA,WAAO,KAAP;AACD;;AAED,QAAMC,iBAAiB,GAAGD,WAAW,CAACE,MAAtC;;AAEA,MAAID,iBAAiB,IAAIA,iBAAiB,CAACE,QAAlB,CAA2BL,MAA3B,CAAzB,EAA6D;AAC3D;AACA,WAAO,IAAP;AACD;;AAED,QAAMM,kBAAkB,GAAGJ,WAAW,CAACK,OAAvC;;AAEA,MAAID,kBAAJ,EAAwB;AACtB,UAAME,mBAAmB,GAAGF,kBAAkB,CAACN,MAAD,CAA9C;;AACA,QAAI,CAACQ,mBAAL,EAA0B;AACxB;AACA,aAAO,KAAP;AACD;;AAED,WAAOA,mBAAmB,CAACP,IAAD,CAA1B;AACD;;AACD,SAAO,KAAP;AACD,CA1BD;;AA4BA,MAAMQ,GAAG,GAAGC,KAAK,IACfZ,KAAK,CAACD,KAAD,EAAQa,KAAK,CAACX,IAAd,EAAoBW,KAAK,CAACC,OAA1B,EAAmCD,KAAK,CAACT,IAAzC,CAAL,GACIS,KAAK,CAACE,GAAN,EADJ,GAEIF,KAAK,CAACG,EAAN,EAHN;;AAKAJ,GAAG,CAACK,YAAJ,GAAmB;AACjBF,EAAAA,GAAG,EAAE,MAAM,IADM;AAEjBC,EAAAA,EAAE,EAAE,MAAM;AAFO,CAAnB;AAKA,eAAeJ,GAAf","sourcesContent":["import rules from \"../rbac-rules\";\r\n\r\nconst check = (rules, role, action, data) => {\r\n  const permissions = rules[role];\r\n  if (!permissions) {\r\n    // role is not present in the rules\r\n    return false;\r\n  }\r\n\r\n  const staticPermissions = permissions.static;\r\n\r\n  if (staticPermissions && staticPermissions.includes(action)) {\r\n    // static rule not provided for action\r\n    return true;\r\n  }\r\n\r\n  const dynamicPermissions = permissions.dynamic;\r\n\r\n  if (dynamicPermissions) {\r\n    const permissionCondition = dynamicPermissions[action];\r\n    if (!permissionCondition) {\r\n      // dynamic rule not provided for action\r\n      return false;\r\n    }\r\n\r\n    return permissionCondition(data);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst Can = props =>\r\n  check(rules, props.role, props.perform, props.data)\r\n    ? props.yes()\r\n    : props.no();\r\n\r\nCan.defaultProps = {\r\n  yes: () => null,\r\n  no: () => null\r\n};\r\n\r\nexport default Can;"]},"metadata":{},"sourceType":"module"}