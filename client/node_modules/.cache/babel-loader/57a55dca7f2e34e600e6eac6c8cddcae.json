{"ast":null,"code":"import rules from\"../rbac-rules\";var check=function check(rules,role,action,data){var permissions=rules[role];if(!permissions){// role is not present in the rules\nreturn false;}var staticPermissions=permissions.static;if(staticPermissions&&staticPermissions.includes(action)){// static rule not provided for action\nreturn true;}var dynamicPermissions=permissions.dynamic;if(dynamicPermissions){var permissionCondition=dynamicPermissions[action];if(!permissionCondition){// dynamic rule not provided for action\nreturn false;}return permissionCondition(data);}return false;};var Can=function Can(props){return check(rules,props.role,props.perform,props.data)?props.yes():props.no();};Can.defaultProps={yes:function yes(){return null;},no:function no(){return null;}};export default Can;","map":{"version":3,"sources":["D:\\Docs\\Programing Projects\\snowline-route-manager\\client\\src\\components\\Can.js"],"names":["rules","check","role","action","data","permissions","staticPermissions","static","includes","dynamicPermissions","dynamic","permissionCondition","Can","props","perform","yes","no","defaultProps"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,eAAlB,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACD,KAAD,CAAQE,IAAR,CAAcC,MAAd,CAAsBC,IAAtB,CAA+B,CAC3C,GAAMC,CAAAA,WAAW,CAAGL,KAAK,CAACE,IAAD,CAAzB,CACA,GAAI,CAACG,WAAL,CAAkB,CAChB;AACA,MAAO,MAAP,CACD,CAED,GAAMC,CAAAA,iBAAiB,CAAGD,WAAW,CAACE,MAAtC,CAEA,GAAID,iBAAiB,EAAIA,iBAAiB,CAACE,QAAlB,CAA2BL,MAA3B,CAAzB,CAA6D,CAC3D;AACA,MAAO,KAAP,CACD,CAED,GAAMM,CAAAA,kBAAkB,CAAGJ,WAAW,CAACK,OAAvC,CAEA,GAAID,kBAAJ,CAAwB,CACtB,GAAME,CAAAA,mBAAmB,CAAGF,kBAAkB,CAACN,MAAD,CAA9C,CACA,GAAI,CAACQ,mBAAL,CAA0B,CACxB;AACA,MAAO,MAAP,CACD,CAED,MAAOA,CAAAA,mBAAmB,CAACP,IAAD,CAA1B,CACD,CACD,MAAO,MAAP,CACD,CA1BD,CA4BA,GAAMQ,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAAAC,KAAK,QACfZ,CAAAA,KAAK,CAACD,KAAD,CAAQa,KAAK,CAACX,IAAd,CAAoBW,KAAK,CAACC,OAA1B,CAAmCD,KAAK,CAACT,IAAzC,CAAL,CACIS,KAAK,CAACE,GAAN,EADJ,CAEIF,KAAK,CAACG,EAAN,EAHW,EAAjB,CAKAJ,GAAG,CAACK,YAAJ,CAAmB,CACjBF,GAAG,CAAE,qBAAM,KAAN,EADY,CAEjBC,EAAE,CAAE,oBAAM,KAAN,EAFa,CAAnB,CAKA,cAAeJ,CAAAA,GAAf","sourcesContent":["import rules from \"../rbac-rules\";\r\n\r\nconst check = (rules, role, action, data) => {\r\n  const permissions = rules[role];\r\n  if (!permissions) {\r\n    // role is not present in the rules\r\n    return false;\r\n  }\r\n\r\n  const staticPermissions = permissions.static;\r\n\r\n  if (staticPermissions && staticPermissions.includes(action)) {\r\n    // static rule not provided for action\r\n    return true;\r\n  }\r\n\r\n  const dynamicPermissions = permissions.dynamic;\r\n\r\n  if (dynamicPermissions) {\r\n    const permissionCondition = dynamicPermissions[action];\r\n    if (!permissionCondition) {\r\n      // dynamic rule not provided for action\r\n      return false;\r\n    }\r\n\r\n    return permissionCondition(data);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst Can = props =>\r\n  check(rules, props.role, props.perform, props.data)\r\n    ? props.yes()\r\n    : props.no();\r\n\r\nCan.defaultProps = {\r\n  yes: () => null,\r\n  no: () => null\r\n};\r\n\r\nexport default Can;"]},"metadata":{},"sourceType":"module"}